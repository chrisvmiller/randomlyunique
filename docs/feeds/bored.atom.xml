<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>randomlyunique</title><link href="http://www.randomlyunique.com/" rel="alternate"></link><link href="http://www.randomlyunique.com/feeds/bored.atom.xml" rel="self"></link><id>http://www.randomlyunique.com/</id><updated>2016-11-30T00:00:00-08:00</updated><entry><title>Bay Area Heatmap</title><link href="http://www.randomlyunique.com/bored/2016/bay-area-heatmap/" rel="alternate"></link><updated>2016-11-30T00:00:00-08:00</updated><author><name></name></author><id>tag:www.randomlyunique.com,2016-11-30:bored/2016/bay-area-heatmap/</id><summary type="html">&lt;p&gt;After a few years in the Bay Area, my wife (she's lived in SF for over 20 years!)
and I decided to move to the almost literal greener pasture of Seattle. While sitting 
in my 1994 SF-priced downtown Seattle apartment (with a frigging washer/dryer and dishwasher),
I decided to aggregate my phones location data. The heatmap below filters out where I lived 
and worked, while plotting the logarithm of my phones recorded location count:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Photo" class="image_center_style" src="http://www.randomlyunique.com/bored/2016/bay-area-heatmap/bay-area-heatmap.png" /&gt;&lt;/p&gt;
&lt;p&gt;Cool observations: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can clearly see my morning Embarcadero coffee walk into work&lt;/li&gt;
&lt;li&gt;This common conversation: "ok, it's Saturday night at 10pm - where should we go?" "Umm, pretty sure the Mission is the only place open at those late hours"&lt;/li&gt;
&lt;li&gt;My incredibly beloved BART ride to where I lived in Berkeley (I can still hear BARTs melodic banshee wail in my dreams) &lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Reinforcement Sort</title><link href="http://www.randomlyunique.com/bored/2016/reinforcement-sort/" rel="alternate"></link><updated>2016-09-15T00:00:00-07:00</updated><author><name></name></author><id>tag:www.randomlyunique.com,2016-09-15:bored/2016/reinforcement-sort/</id><summary type="html">&lt;p align="center"&gt;
You know Quicksort and Merge sort and Timsort and Shell sort &lt;br&gt;
Heapsort and Bubble sort and Insertion sort and Selection sort &lt;br&gt;
But do you recall the most god-awful sort of all? 
&lt;/p&gt;

&lt;p&gt;A Reinforcement Sort (a sort done through reinforcement(ish) learning) is the Nickelback of sorting 
algorithms - a perfect superposition of horrible and awesome. This rockstar was developed using an 
epsilon greedy &lt;a href=https://en.wikipedia.org/wiki/Q-learning&gt;Q-learning&lt;/a&gt; approach
with the aim of generating the best python sorting script. This mainly involved combining code 
fragments together and giving rewards based on how well these scripts sort a list. The exact setup is 
summarized as follows:&lt;/p&gt;
&lt;p&gt;1) &lt;a href=https://github.com/chrisvmiller/analytics/blob/master/reinforcement_sort/action.py#L50&gt;State&lt;/a&gt;: A binary array chad-kroegered from a md5 hash of the python code string &lt;br&gt;
2) &lt;a href=https://github.com/chrisvmiller/analytics/blob/master/reinforcement_sort/action.py#L8&gt;Actions&lt;/a&gt;: 
I figured sorting will require some looping, swapping and probably a conditional or two, so I made these actions on a state&lt;br&gt;
3) &lt;a href=https://github.com/chrisvmiller/analytics/blob/master/reinforcement_sort/reward.py&gt;Reward&lt;/a&gt;: 
The state receives a score of -1 if the python code doesn't run, -10 is the code is over 300 characters or +1000 if the list is correctly sorted. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;After &lt;a href=https://github.com/chrisvmiller/analytics/blob/master/reinforcement_sort/learn_sort.py&gt;training&lt;/a&gt; up a neural net, 
I received this optimal sort: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unsorted_list&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unsorted_list&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unsorted_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;unsorted_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
            &lt;span class="n"&gt;unsorted_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;unsorted_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;unsorted_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;unsorted_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now you may be telling yourself that this looks exactly like a Bubble Sort, but I assure you it's not. 
A Bubble Sort has a reasonable time complexity of O(n^2), but a Reinforcement Sort 
runs in O(oh god, why am I doing this).&lt;/p&gt;</summary></entry><entry><title>A Token of Tolkien</title><link href="http://www.randomlyunique.com/bored/2016/a-token-of-tolkien/" rel="alternate"></link><updated>2016-07-03T00:00:00-07:00</updated><author><name></name></author><id>tag:www.randomlyunique.com,2016-07-03:bored/2016/a-token-of-tolkien/</id><summary type="html">&lt;p&gt;The Hobbit and The Lord of the Rings are undeniably great books, with rich complex characters and a deep thoughtful story. 
So, this seems like an ideal case to apply an autosummary algorithm meant for tasks like factual news articles!&lt;/p&gt;
&lt;p&gt;The &lt;a href=https://github.com/chrisvmiller/analytics/blob/master/autosummarizer/summarize.py&gt;method&lt;/a&gt; I programmed is pretty straightforward,
where I find the most representative sentence within a given blob of text. This is accomplished by tokenizing each sentence, converting to a 
tf-idf matrix, multiplying this matrix by it's transpose to get a similarity between sentences, mapping to a graph where each node is a sentence
and each edge is its similarity, then PageRanking to determine the 'best' sentence. &lt;/p&gt;
&lt;p&gt;The 'ok, these seems reasonable, I guess' results are shown below:&lt;/p&gt;
&lt;table class="table table-bordered"&gt;
    &lt;thead&gt;
      &lt;tr class="text-center"&gt;
        &lt;th class="text-center"&gt;Book&lt;/th&gt;
        &lt;th class="text-center"&gt;AutoSummary&lt;/th&gt;
      &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;The Hobbit&lt;/td&gt;
          &lt;td&gt;Having made up his mind he crept along as cleverly as he could.&lt;/td&gt;
        &lt;/tr&gt;

        &lt;tr&gt;
          &lt;td class="active"&gt;Fellowship of the Ring&lt;/td&gt;
          &lt;td class="active"&gt;If any of the Wise should with this Ring overthrow the Lord of Mordor, using his own arts, he would then set himself on Saurons throne, and yet another Dark Lord would appear.&lt;/td&gt;
        &lt;/tr&gt;

        &lt;tr&gt;
          &lt;td&gt;The Two Towers&lt;/td&gt;
          &lt;td&gt;All Isengard must be emptied; and Saruman has armed the wild hillmen and herd-folk of Dunland beyond the rivers, and these also he loosed upon us.&lt;/td&gt;
        &lt;/tr&gt;

        &lt;tr&gt;
          &lt;td class="active"&gt;The Return of the King&lt;/td&gt;
          &lt;td class="active"&gt;He (Frodo) felt that if once he went beyond the crown of the pass and took one step veritably down into the land of Mordor, that step would be irrevocable.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;span style="color:green; font-weight: bold;"&gt;Special Bonus:&lt;/span&gt; When I apply this autosummary to sentences that contain the word "Sam" throughout The Lord of the Rings trilogy, I get: &lt;/p&gt;
&lt;table class="table table-bordered"&gt;
    &lt;thead&gt;
      &lt;tr class="text-center"&gt;
        &lt;th class="text-center"&gt;Character&lt;/th&gt;
        &lt;th class="text-center"&gt;AutoSummary&lt;/th&gt;
      &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td text-center"&gt;Sam&lt;/td&gt;
          &lt;td&gt;And Sam had another growing anxiety.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</summary></entry><entry><title>Hasta la Palindrome</title><link href="http://www.randomlyunique.com/bored/2016/hasta-la-palindrome/" rel="alternate"></link><updated>2016-05-02T00:00:00-07:00</updated><author><name></name></author><id>tag:www.randomlyunique.com,2016-05-02:bored/2016/hasta-la-palindrome/</id><summary type="html">&lt;p&gt;As a tech worker, I can unequivocally state that the only thing more important than debating coding 
styles or following Agile methodologies is the ability to rapidly whiteboard algorithms. So, if
you're ever asked to write a palindrome detector during a tech screen, be sure to impress 
the interviewer with this beauty, written in &lt;a href=http://lhartikk.github.io/ArnoldC/&gt;ArnoldC&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;
&lt;pre&gt;
&lt;span class="k"&gt;IT'S SHOWTIME&lt;/span&gt;
  &lt;span class="ni"&gt;HEY CHRISTMAS TREE&lt;/span&gt; potentialPalindrome
    &lt;span class="ni"&gt;YOU SET US UP&lt;/span&gt; 12321

  &lt;span class="ni"&gt;HEY CHRISTMAS TREE&lt;/span&gt; isPalindrome
    &lt;span class="ni"&gt;YOU SET US UP&lt;/span&gt; @I LIED
  &lt;span class="ni"&gt;GET YOUR ASS TO MARS&lt;/span&gt; isPalindrome
  &lt;span class="ni"&gt;DO IT NOW&lt;/span&gt; checkPalindrome potentialPalindrome

  &lt;span class="nn"&gt;BECAUSE I'M GOING TO SAY PLEASE&lt;/span&gt; isPalindrome
      &lt;span class="ni"&gt;TALK TO THE HAND&lt;/span&gt; "It is a Palindrome"
  &lt;span class="nn"&gt;BULLSHIT&lt;/span&gt;
      &lt;span class="ni"&gt;TALK TO THE HAND&lt;/span&gt; "It is NOT a Palindrome"
  &lt;span class="nn"&gt;YOU HAVE NO RESPECT FOR LOGIC&lt;/span&gt;
&lt;span class="k"&gt;YOU HAVE BEEN TERMINATED&lt;/span&gt;

&lt;span class="k"&gt;LISTEN TO ME VERY CAREFULLY&lt;/span&gt; checkPalindrome
  &lt;span class="k"&gt;I NEED YOUR CLOTHES YOUR BOOTS AND YOUR MOTORCYCLE&lt;/span&gt; number
  &lt;span class="k"&gt;GIVE THESE PEOPLE AIR&lt;/span&gt;

  &lt;span class="ni"&gt;HEY CHRISTMAS TREE&lt;/span&gt; temp
    &lt;span class="ni"&gt;YOU SET US UP&lt;/span&gt; number
  &lt;span class="ni"&gt;HEY CHRISTMAS TREE&lt;/span&gt; reverse
    &lt;span class="ni"&gt;YOU SET US UP&lt;/span&gt; 0
  &lt;span class="ni"&gt;HEY CHRISTMAS TREE&lt;/span&gt; tempMod10
    &lt;span class="ni"&gt;YOU SET US UP&lt;/span&gt; 0
  &lt;span class="ni"&gt;HEY CHRISTMAS TREE&lt;/span&gt; isPalindrome
    &lt;span class="ni"&gt;YOU SET US UP&lt;/span&gt; 0

  &lt;span class="nn"&gt;STICK AROUND&lt;/span&gt; temp
      &lt;span class="ni"&gt;GET TO THE CHOPPER&lt;/span&gt; tempMod10
        &lt;span class="ni"&gt;HERE IS MY INVITATION&lt;/span&gt; temp
        &lt;span class="ni"&gt;I LET HIM GO&lt;/span&gt; 10
      &lt;span class="ni"&gt;ENOUGH TALK&lt;/span&gt;

      &lt;span class="ni"&gt;GET TO THE CHOPPER&lt;/span&gt; reverse
        &lt;span class="ni"&gt;HERE IS MY INVITATION&lt;/span&gt; reverse
        &lt;span class="ni"&gt;YOU'RE FIRED&lt;/span&gt; 10
        &lt;span class="ni"&gt;GET UP&lt;/span&gt; tempMod10
      &lt;span class="ni"&gt;ENOUGH TALK&lt;/span&gt;

      &lt;span class="ni"&gt;GET TO THE CHOPPER&lt;/span&gt; temp
        &lt;span class="ni"&gt;HERE IS MY INVITATION&lt;/span&gt; temp
        &lt;span class="ni"&gt;HE HAD TO SPLIT&lt;/span&gt; 10
      &lt;span class="ni"&gt;ENOUGH TALK&lt;/span&gt;
  &lt;span class="nn"&gt;CHILL&lt;/span&gt;

  &lt;span class="ni"&gt;GET TO THE CHOPPER&lt;/span&gt; isPalindrome
    &lt;span class="ni"&gt;HERE IS MY INVITATION&lt;/span&gt; number
    &lt;span class="ni"&gt;YOU ARE NOT YOU YOU ARE ME&lt;/span&gt; reverse
  &lt;span class="ni"&gt;ENOUGH TALK&lt;/span&gt;

  &lt;span class="ni"&gt;I'LL BE BACK&lt;/span&gt; isPalindrome
&lt;span class="k"&gt;HASTA LA VISTA, BABY&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;</summary></entry><entry><title>Sommelier Training</title><link href="http://www.randomlyunique.com/bored/2016/sommelier-training/" rel="alternate"></link><updated>2016-03-10T00:00:00-08:00</updated><author><name></name></author><id>tag:www.randomlyunique.com,2016-03-10:bored/2016/sommelier-training/</id><summary type="html">&lt;p&gt;What's the best way to refine my wine intelligence? Since nothing immediately comes to mind, I'll take the fallback 
algorithmic approach and brute-force a solution: sampling lots and lots of wine! So, let's determine the amount 
of wine I need to drink to achieve the same culinary genius as Robin Williams in Neverland!&lt;/p&gt;
&lt;p&gt;After googling around for a few minutes, I was able to find a wine training set composed of a dozen wine features 
(acidity, pH, alcohol, etc) and a ranked quality. I then proceeded to classify this wine quality (at different splits: good/bad, good/okay/bad, etc) 
with a fancy-pants &lt;a href=https://github.com/chrisvmiller/analytics/blob/master/sommelier_training/WineClassifier.ipynb&gt;neural network&lt;/a&gt;. 
The converged prediction iteration count, after normalizing by the amount of wine it takes to blindfoldedly distinguish 
between red and white, is shown in the chart below: &lt;/p&gt;
&lt;p&gt;&lt;img alt="Photo" class="image_center_style" src="http://www.randomlyunique.com/bored/2016/sommelier-training/sommelier-training.png" /&gt;&lt;/p&gt;
&lt;p&gt;Now, I only need to convince my wife that purchasing 7 Balthazars of pink bubbly wine is intended for research 
and my life will be fantastic.&lt;/p&gt;</summary></entry><entry><title>Late Night Coding</title><link href="http://www.randomlyunique.com/bored/2016/late-night-coding/" rel="alternate"></link><updated>2016-01-18T00:00:00-08:00</updated><author><name></name></author><id>tag:www.randomlyunique.com,2016-01-18:bored/2016/late-night-coding/</id><summary type="html">&lt;p&gt;What are commit messages like after normal working hours?  Using every public Github commit message from November 2015, I'll 
dive into this question with a simple natural language processing script! &lt;/p&gt;
&lt;p&gt;With the help of Apache Spark, I regexed out alphanumerics, removed stopwords, lemmatized, then binned unigrams
into daytime (9am to 9pm) and nighttime buckets. After this separation, 
I found the more common daytime(/nighttime) words by subtracting nighttime(/daytime) word frequencies from daytime(/nighttime) 
word frequencies. The word clouds below highlight these most common commit words: &lt;/p&gt;
&lt;p&gt;&lt;img alt="Photo" class="image_center_style" src="http://www.randomlyunique.com/bored/2016/late-night-coding/late-night-coding.jpg" /&gt;&lt;/p&gt;</summary></entry><entry><title>Pillars of Creativity</title><link href="http://www.randomlyunique.com/bored/2015/pillars-of-creativity/" rel="alternate"></link><updated>2015-12-14T00:00:00-08:00</updated><author><name></name></author><id>tag:www.randomlyunique.com,2015-12-14:bored/2015/pillars-of-creativity/</id><summary type="html">&lt;p&gt;A video game, badminton racket or French press are undoubtedly wonderful presents, but a great gift encourages originality. 
Below, I've listed some of my favorite imagination tools: &lt;/p&gt;
&lt;p&gt;&lt;img alt="Photo" class="image_center_style" src="http://www.randomlyunique.com/bored/2015/pillars-of-creativity/pillars-of-creativity.jpg" /&gt;&lt;/p&gt;
&lt;p style='text-align:center'&gt;*cough..chelsea..cough cough*&lt;/p&gt;</summary></entry><entry><title>Mate Locate</title><link href="http://www.randomlyunique.com/bored/2015/mate-locate/" rel="alternate"></link><updated>2015-11-23T00:00:00-08:00</updated><author><name></name></author><id>tag:www.randomlyunique.com,2015-11-23:bored/2015/mate-locate/</id><summary type="html">&lt;p&gt;As I write this, I'm taking a break from searching for my recently wandered off and phoneless wife. I wish to find her as 
quickly as possible, but I'm currently experiencing some inner turmoil. Should I continue on this wife-hunt or is it 
more time-efficient to remain stationary and wait until she walks by? Do two confined random-walks meet quicker
than a single random-walk finding a stationary point? Wait a second, I can write a script 
(&lt;a href="https://github.com/chrisvmiller/analytics/blob/master/mate_locate/locate.py"&gt;click here!&lt;/a&gt;) that simulates 
finding my lost and (presumingly) scared wife!  &lt;/p&gt;
&lt;p&gt;In order to keep things simple, I'll assume this mall is a bounded square grid where my wife and I are initially assigned 
to a random location. Then, during each iteration, a non-stationary person walks a single square in any 
horizontal, vertical or diagonal direction. Whenever my wife and I are in the same square, I will record the total number of squares 
traveled and reset the simulation. This process repeats for two scenarios: 1) We're both randomly moving 
around 2) One person remains stationary, until representative total-distance averages are reached.     &lt;/p&gt;
&lt;p&gt;The diagram below shows a typical example for each scenario:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Photo" class="image_center_style" src="http://www.randomlyunique.com/bored/2015/mate-locate/mate-locate.png" /&gt;&lt;/p&gt;
&lt;p&gt;After running this simulation for a few different sized grids, I confirmed that two people randomly walking around is 
approximately 1.6x faster! Now, I would typically follow this result, but my wife already found me like 45 minutes ago and 
she's been patiently waiting for me to finish this blog post.&lt;/p&gt;</summary></entry><entry><title>Daily Money Swim</title><link href="http://www.randomlyunique.com/bored/2015/daily-money-swim/" rel="alternate"></link><updated>2015-10-23T00:00:00-07:00</updated><author><name></name></author><id>tag:www.randomlyunique.com,2015-10-23:bored/2015/daily-money-swim/</id><summary type="html">&lt;p&gt;Why are people so incredibly greedy? At what point does a CEO choose a multi-million dollar bonus over employee 
healthcare?  What the hell do you even do with a net worth of over 10 million dollars anyways?  You can easily afford a few 
houses, frequent extravagant vacations, rooms upon rooms of new toys and a near endless supply of fancy food with 10 million dollars. 
Well, there is only one logical answer: Scrooge McDuck's Money Tower. There is no better way to make your fellow 
billionaire friends jealous than an Olympic sized pool filled with gold coins.  &lt;/p&gt;
&lt;p&gt;Now, let's find the height of gold, silver, and copper coins for a five square meter money-tower! Assuming a simple closed packed 
lattice and a net value of one billion per tower (estimated from Gold Buffalo, Silver Eagle, and Copper Round coins), I calculated:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Photo" class="image_center_style" src="http://www.randomlyunique.com/bored/2015/daily-money-swim/daily-money-swim.png" /&gt;&lt;/p&gt;
&lt;p&gt;As you can clearly see, money towers ain't cheap. You will never impress anyone with a kiddie pool of gold coins 
or a skyscrapper of lameass copper - 20 billion dollars is the bare minimum for an adequate golden swim.   &lt;/p&gt;</summary></entry><entry><title>The Cheese Doodle Dilemma</title><link href="http://www.randomlyunique.com/bored/2015/cheese-doodle-dilemma/" rel="alternate"></link><updated>2015-09-24T00:00:00-07:00</updated><author><name></name></author><id>tag:www.randomlyunique.com,2015-09-24:bored/2015/cheese-doodle-dilemma/</id><summary type="html">&lt;p&gt;As a child, my mother believed the consumption of cheese doodles after dinner enticed the boogeyman. This may sound like 
a ridiculous allegation, but luckily the line between sensible and silly is extremely blurry at my old age. So, with 
this mindset, I decided to run a three-week experiment, where I would eat a handful of cheese doodles before falling 
asleep each night. Here's the result: &lt;/p&gt;
&lt;p&gt;&lt;img alt="Photo" class="image_center_style" src="http://www.randomlyunique.com/bored/2015/cheese-doodle-dilemma/cheese-doodle.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Before jumping to any conclusions, let's run a simple one-sample test-of-proportions hypothesis test. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Null Hypothesis:&lt;/strong&gt; Cheese doodles are a wonderful culinary treat &lt;br/&gt;
&lt;strong&gt;Alternative Hypothesis:&lt;/strong&gt; Lucifer is here on earth in cheese doodle form &lt;/p&gt;
&lt;p&gt;After some number crunching, I calculated a t-statistic of 10.1, which is quite a bit bigger than it's critical value of 2.8 
(&amp;alpha;=0.01). So, I'm forced to reject the null hypothesis and recommend that everyone AVOID EATING CHEESE DOODLES 
AT ALL COST BEFORE BED!!! &lt;/p&gt;</summary></entry></feed>